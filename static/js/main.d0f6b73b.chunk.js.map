{"version":3,"sources":["Components/Task/Task.module.css","Components/InputForm/InputForm.module.css","Components/Nav/Nav.module.css","Components/AllTasks/AllTasks.module.css","Components/ToDoList.module.css","API/API.js","Redux/taskReducer.js","Components/InputForm/InputForm.jsx","Components/Task/Task.jsx","Components/AllTasks/AllTasks.jsx","Components/Lists/Lists.jsx","Components/Nav/Nav.jsx","Components/ToDoList.jsx","Redux/reduxStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","baseURL","credentials","tasksAPI","get","then","response","data","task","post","taskId","put","delete","initialState","tasks","id","taskText","done","priority","newTaskText","lists","listText","taskReducer","state","action","type","newTask","newList","newListText","getTasksTC","dispatch","a","InputForm","props","useForm","register","handleSubmit","setValue","getValues","className","css","form","onSubmit","useNewTask","text","name","ref","placeholder","select","value","btn","Task","style","high","medium","low","onClick","deleteTask","deleteBtn","checkTask","checkBtn","AllTasks","useSelector","taskPage","useDispatch","useDeleteTask","deleteTasksTC","useCheckTask","checkTasksTC","useEffect","allTasks","filter","length","addTasksTC","map","t","Lists","NavBar","links","navLink","to","ToDoList","todo","Nav","path","render","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0f6b73b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2i8xg\",\"state\":\"Task_state__3ZMHM\",\"deleteBtn\":\"Task_deleteBtn__17owL\",\"checkBtn\":\"Task_checkBtn__2ZdP8\",\"text\":\"Task_text__Xthyq\",\"high\":\"Task_high___AUQL\",\"medium\":\"Task_medium__1XVW3\",\"low\":\"Task_low__29NL3\",\"done\":\"Task_done__1oz61\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InputForm_form__K2ZVr\",\"text\":\"InputForm_text__3Icxu\",\"select\":\"InputForm_select__2tnXU\",\"btn\":\"InputForm_btn__2sksK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"Nav_links__1Qew5\",\"navLink\":\"Nav_navLink__O2BDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allTasks\":\"AllTasks_allTasks__3jm6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"ToDoList_todo__1yxY9\"};","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:3000',\r\n    credentials: 'include'\r\n});\r\n\r\nexport const tasksAPI = {\r\n    getTasks() {\r\n        return (\r\n            instance\r\n                .get(`list`)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    addTasks(task) {\r\n        return (\r\n            instance\r\n                .post(`list`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    changeTasks(taskId, task) {\r\n        return (\r\n            instance\r\n                .put(`list/${taskId}`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    deleteTasks(taskId) {\r\n        return (\r\n            instance\r\n                .delete(`list/${taskId}`)\r\n                .then(response => {\r\n                    // debugger\r\n                    return response.data\r\n                })\r\n        )\r\n    }\r\n}","// API\r\nimport { tasksAPI } from './../API/API';\r\n\r\n// consts\r\nconst SET_TASK = 'SET-TASK';\r\nconst ADD_TASK = 'ADD-TASK';\r\nconst UPDATE_TASK_TEXT = 'UPDATE-TASK-TEXT';\r\nconst ADD_LIST = 'ADD-LIST';\r\n\r\n// initial state\r\nconst initialState = {\r\n    tasks: [\r\n        { id: 1, taskText: 'write 1 task', done: 'true', priority: 'high' },\r\n        { id: 2, taskText: 'check 1 task', done: 'false', priority: 'medium' }\r\n    ],\r\n\r\n    newTaskText: '',\r\n\r\n    lists: [\r\n        { id: 1, listText: 'first list' },\r\n        { id: 2, listText: 'second list' }\r\n    ]\r\n};\r\n\r\n\r\n// reducer\r\nconst taskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        case ADD_TASK:\r\n            debugger\r\n            let newTask = {\r\n                id: 3,\r\n                taskText: action.newTaskText,\r\n                priority: action.priority\r\n            };\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, newTask]\r\n            }\r\n\r\n        case UPDATE_TASK_TEXT:\r\n\r\n            return {\r\n                ...state,\r\n                newTaskText: action.newTaskText\r\n            }\r\n\r\n        case ADD_LIST:\r\n            let newList = {\r\n                id: 3,\r\n                listText: action.newListText\r\n            };\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, newList]\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default taskReducer;\r\n\r\n// action creators\r\nexport const setTasks = (tasks) => ({ type: SET_TASK, tasks });\r\n// export const addTask = (task) => ({ type: ADD_TASK, task });\r\nexport const updateTaskText = (newTaskText) => ({ type: UPDATE_TASK_TEXT, newTaskText });\r\n\r\n\r\n// thunk creators\r\nexport const getTasksTC = () => async (dispatch) => {\r\n    let response = await tasksAPI.getTasks();\r\n    dispatch(setTasks(response))\r\n};\r\n\r\nexport const deleteTasksTC = (id) => async (dispatch) => {\r\n    let response = await tasksAPI.deleteTasks(id);\r\n    dispatch(getTasksTC());\r\n};\r\n\r\nexport const checkTasksTC = (id, task) => async (dispatch) => {\r\n    let response = await tasksAPI.changeTasks(id, task);\r\n    dispatch(getTasksTC());\r\n};\r\n\r\nexport const addTasksTC = (task) => async (dispatch) => {\r\n    let response = await tasksAPI.addTasks(task);\r\n    dispatch(getTasksTC());\r\n};","import React from 'react';\r\nimport { addTaskTC } from './../../Redux/taskReducer';\r\nimport { useForm} from 'react-hook-form';\r\nimport { connect } from 'react-redux';\r\nimport css from './InputForm.module.css'\r\nimport { useEffect } from 'react';\r\n\r\nconst InputForm = (props) => {\r\n    const { register, handleSubmit, getValues, setValue } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        let newTask = {\r\n            taskText : data.taskText,\r\n            priority: data.priority,\r\n            done: 'false'\r\n        }\r\n        props.useNewTask(newTask);\r\n        setValue('taskText', '')\r\n    }\r\n\r\n    return (\r\n        <form className = {css.form} onSubmit = {handleSubmit(onSubmit)}>\r\n\r\n            <input  className = {css.text} name = 'taskText' \r\n                    ref = {register} placeholder = {'enter your task'} />\r\n\r\n            <select className = {css.select} name = 'priority' ref = {register}>\r\n                <option value = 'high'>high</option>\r\n                <option value = 'medium'>medium</option>\r\n                <option value = 'low'>low</option>\r\n            </select>\r\n            <input className = {css.btn} type = 'submit' />\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport css from './Task.module.css'\r\n\r\nconst Task = (props) => {\r\n\r\n    if (props.task.done == 'false') {\r\n        if (props.task.priority == 'high') {\r\n            var style = css.high\r\n        } else if (props.task.priority == 'medium') {\r\n            var style = css.medium\r\n        } else {\r\n            var style = css.low\r\n        }\r\n    } else {\r\n        var style = css.done\r\n    }\r\n\r\n    \r\n\r\n    function changeTask(task) {\r\n        task.done = 'true';\r\n        props.checkTask(props.task.id, props.task)\r\n    }\r\n\r\n    return (\r\n        <div className={`${css.task} + ${style}`}>\r\n            <div className={css.text}>{props.task.taskText}</div>\r\n\r\n            {props.task.done == 'true'\r\n                    ? <button onClick = {() => props.deleteTask(props.task.id)} className={css.deleteBtn}>Delete</button>\r\n                    : <button onClick = {() => changeTask(props.task)} className={css.checkBtn}>Check done</button>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Task","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addTasksTC, checkTasksTC, deleteTasksTC, getTasksTC } from '../../Redux/taskReducer';\r\nimport InputForm from '../InputForm/InputForm';\r\nimport Task from './../Task/Task';\r\nimport css from './AllTasks.module.css';\r\n\r\n\r\nconst AllTasks = () => {\r\n\r\n    const tasks = useSelector(state => state.taskPage.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC());\r\n    }, []);\r\n\r\n    function useDeleteTask(id) {\r\n        dispatch(deleteTasksTC(id))\r\n    };\r\n\r\n    function useCheckTask(id, task) {\r\n        dispatch(checkTasksTC(id, task))\r\n    }\r\n\r\n    function useNewTask(task) {\r\n        dispatch(addTasksTC(task))\r\n    }\r\n\r\n    return (\r\n        <div className={css.allTasks} >\r\n            <h2>Active Tasks: {tasks.filter(task => task.done == 'false').length} </h2>\r\n            <InputForm useNewTask = {useNewTask}  />\r\n            {tasks.map(t => <Task\r\n                task={t}\r\n                deleteTask={useDeleteTask}\r\n                checkTask={useCheckTask}\r\n            />)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AllTasks;","import React from 'react';\r\nimport Task from './../Task/Task'\r\n\r\n\r\nconst Lists = (props) => {\r\n    return (\r\n        <div>\r\n            <Task />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Lists;","import React from 'react';\r\nimport css from './Nav.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst NavBar = (props) => {\r\n    return (\r\n        <div className = {css.links} >\r\n            <NavLink className = {css.navLink} to = '/AllTasks' >AllTasks</NavLink>\r\n            <NavLink className = {css.navLink} to = '/AllCollections' >AllCollections</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport AllTask from './AllTasks/AllTasks';\r\nimport Lists from './Lists/Lists';\r\nimport NavBar from './Nav/Nav';\r\nimport css from './ToDoList.module.css';\r\n\r\nconst ToDoList = () => {\r\n    return (\r\n        \r\n            <div className={css.todo}>\r\n                <h1>ToDoList</h1>\r\n                <NavBar />\r\n                <Route path='/allTasks' render={() => <AllTask />} />\r\n                <Route path='/allLists' render={() => <Lists />} />\r\n\r\n            </div>\r\n\r\n    )\r\n};\r\n\r\nexport default ToDoList;","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport taskReducer from './taskReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n    taskPage: taskReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport './App.css';\nimport ToDoList from './Components/ToDoList';\nimport store from './Redux/reduxStore'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <HashRouter>\n          <ToDoList />\n        </HashRouter>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["API/API.js","Redux/taskReducer.js","Components/InputForm/InputForm.jsx","Components/Task/Task.jsx","Components/AllTasks/AllTasks.jsx","Components/InputFormList/InputFormList.jsx","Redux/listReducer.js","Components/List/List.jsx","Components/Lists/Lists.jsx","Redux/authReducer.js","Components/Login/LoginForm.jsx","Components/Header/Header.jsx","Components/ToDoList.jsx","Redux/reduxStore.js","App.js","serviceWorker.js","index.js","Components/AllTasks/AllTasks.module.css","Components/List/List.module.css","Components/Task/Task.module.css","Components/Login/LoginForm.module.css","Components/Lists/Lists.module.css","Components/InputForm/InputForm.module.css","Components/InputFormList/InputForm.module.css","Components/Nav/Nav.module.css","Components/ToDoList.module.css"],"names":["instance","axios","baseURL","credentials","tasksAPI","task","post","then","response","data","taskId","put","delete","listsAPI","patch","initialState","tasks","taskReducer","state","action","type","newTask","id","taskName","newTaskText","isNow","setTasks","getTasksTC","listId","dispatch","a","firebase","ref","on","elem","val","InputForm","props","useForm","register","handleSubmit","setValue","className","css","form","onSubmit","taskText","done","useNewTask","text","name","placeholder","for","addBtn","value","Task","isDone","style","high","low","useSelector","authPage","isAuth","onClick","deleteTask","deleteBtn","checkTask","changeTask","checkBtn","to","AllTasks","taskPage","useDispatch","useDeleteTask","deleteTasksTC","useCheckTask","checkTasksTC","useEffect","path","window","location","href","split","length","allTasks","header","headerText","filter","headerLink","inputForm","addTasksTC","map","t","taskListName","lists","newListText","listReducer","newList","listText","getListsTC","List","list","link","btns","update","updateList","deleteList","Lists","listPage","useDeleteList","child","remove","deleteListsTC","useUpdateList","updateListsTC","InputFormList","once","console","log","updates","addListsTC","l","login","authReducer","payload","setUserData","showErrors","yup","shape","required","password","LoginForm","resolver","yupResolver","errors","rememberme","signInWithEmailAndPassword","catch","error","message","checkbox","check","btn","Header","withRouter","todo","render","exact","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","App","Boolean","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a826f71c.chunk.js","sourcesContent":["import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:3000',\r\n    credentials: 'include'\r\n});\r\n\r\nexport const tasksAPI = {\r\n    getTasks() {\r\n        return (\r\n            instance\r\n                .get(`list`)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    addTasks(task) {\r\n        return (\r\n            instance\r\n                .post(`list`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    changeTasks(taskId, task) {\r\n        return (\r\n            instance\r\n                .put(`list/${taskId}`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    deleteTasks(taskId) {\r\n        return (\r\n            instance\r\n                .delete(`list/${taskId}`)\r\n                .then(response => {\r\n                    // debugger\r\n                    return response.data\r\n                })\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const listsAPI = {\r\n    getLists() {\r\n        return (\r\n            instance\r\n                .get(`taskList`)\r\n                .then(response => {\r\n                    if (response.status == '200') {\r\n                        return response.data\r\n                    } else if (response.status == '404') {\r\n                        console.log('404 Not Found')\r\n                    }\r\n                    \r\n                })\r\n        )\r\n    },\r\n\r\n    addLists(task) {\r\n        return (\r\n            instance\r\n                .post(`taskList`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    changeLists(taskId, task) {\r\n        return (\r\n            instance\r\n                .patch(`taskList/${taskId}`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    deleteLists(taskId) {\r\n        return (\r\n            instance\r\n                .delete(`taskList/${taskId}`)\r\n                .then(response => {\r\n                    // debugger\r\n                    return response.data\r\n                })\r\n        )\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return (\r\n            instance\r\n                .get(`auth`)\r\n                .then(response => {\r\n                    return response\r\n                })\r\n        )\r\n    }\r\n};\r\n\r\nexport const logAPI = {\r\n    login(login, password, rememeberme) {\r\n        return (\r\n            instance\r\n                .post(`login`, {login, password, rememeberme })\r\n                .then(response => {\r\n                    if (response.resultCode === '200') {\r\n                        return response\r\n                    }\r\n                })\r\n        )\r\n    },\r\n\r\n    logout() {\r\n        return (\r\n            instance\r\n                .delete(`logout`)\r\n                .then(response => {\r\n                    debugger\r\n                    return response\r\n                })\r\n        )\r\n    }\r\n}","// API\r\nimport { tasksAPI } from './../API/API';\r\nimport * as firebase from 'firebase';\r\n\r\n// consts\r\nconst SET_TASK = 'SET-TASK';\r\nconst ADD_TASK = 'ADD-TASK';\r\nconst UPDATE_TASK_TEXT = 'UPDATE-TASK-TEXT';\r\n\r\n// initial state\r\nconst initialState = {\r\n    tasks: [\r\n    ]\r\n};\r\n\r\n\r\n// reducer\r\nconst taskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASK:\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks.task\r\n            }\r\n        case ADD_TASK:\r\n            // debugger\r\n            let newTask = {\r\n                id: 3,\r\n                taskName: action.newTaskText,\r\n                isNow: action.isNow\r\n            };\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, newTask]\r\n            }\r\n\r\n        case UPDATE_TASK_TEXT:\r\n\r\n            return {\r\n                ...state,\r\n                newTaskText: action.newTaskText\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default taskReducer;\r\n\r\n// action creators\r\nexport const setTasks = (tasks) => ({ type: SET_TASK, tasks });\r\n// export const addTask = (task) => ({ type: ADD_TASK, task });\r\nexport const updateTaskText = (newTaskText) => ({ type: UPDATE_TASK_TEXT, newTaskText });\r\n\r\n\r\n// thunk creators\r\nexport const getTasksTC = (listId) => async (dispatch) => {\r\n\r\n    const db = firebase.database().ref('taskList/');\r\n    db.on('value', (elem) => {\r\n        let response = elem.val();\r\n        let tasks = response[listId]\r\n        dispatch(setTasks(tasks))\r\n    })\r\n\r\n\r\n    // let response = await tasksAPI.getTasks();\r\n    // dispatch(setTasks(response))\r\n};\r\n\r\nexport const deleteTasksTC = (id) => async (dispatch) => {\r\n    await tasksAPI.deleteTasks(id);\r\n    dispatch(getTasksTC());\r\n};\r\n\r\nexport const checkTasksTC = (id, task) => async (dispatch) => {\r\n    await tasksAPI.changeTasks(id, task);\r\n    dispatch(getTasksTC());\r\n};\r\n\r\nexport const addTasksTC = (task) => async (dispatch) => {\r\n    await tasksAPI.addTasks(task);\r\n    dispatch(getTasksTC());\r\n};","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport css from './InputForm.module.css';\r\n\r\nconst InputForm = (props) => {\r\n    const { register, handleSubmit, setValue } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        let newTask = {\r\n            taskText: data.taskText,\r\n            isNow: data.isNow,\r\n            done: 'false'\r\n        }\r\n        props.useNewTask(newTask);\r\n        setValue('taskText', '')\r\n    }\r\n\r\n    return (\r\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <input className={css.text} name='taskText'\r\n                ref={register} placeholder={'enter your task'} />\r\n\r\n            <label for = 'isNow'>Срочность</label>\r\n            <input name = 'isNow' ref = {register} id = 'isNow' type = 'checkbox' />\r\n            \r\n            <input className={css.addBtn} value=\"ADD\" type='submit'></input>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport css from './Task.module.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n\r\nconst Task = (props) => {\r\n\r\n    let task = props.task;\r\n\r\n    if (!task.isDone) {\r\n        if (task.isNow) {\r\n            var style = css.high\r\n        } else if (!task.isNow) {\r\n            var style = css.low\r\n        }\r\n    } else {\r\n        var style = css.done\r\n    }\r\n\r\n    function changeTask(task) {\r\n        task.isDone = 'true';\r\n        props.checkTask(task.id, task)\r\n    };\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n    if (!isAuth) {\r\n        return <Redirect to = {'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={`${css.task} + ${style}`}>\r\n            <div className={css.text}>{task.taskName}</div>\r\n\r\n            {task.isDone\r\n                    ? <button onClick = {() => props.deleteTask(task.id)} className={css.deleteBtn}>Delete</button>\r\n                    : <button onClick = {() => changeTask(props.task)} className={css.checkBtn}>Check done</button>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Task","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { addTasksTC, checkTasksTC, deleteTasksTC, getTasksTC } from '../../Redux/taskReducer';\r\nimport InputForm from '../InputForm/InputForm';\r\nimport Task from './../Task/Task';\r\nimport css from './AllTasks.module.css';\r\n\r\n\r\nconst AllTasks = () => {\r\n\r\n    const tasks = useSelector(state => state.taskPage.tasks);\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let path = window.location.href;\r\n        path = path.split('/');\r\n        let listId = path[path.length - 1];\r\n        dispatch(getTasksTC(listId));\r\n    }, []);\r\n\r\n    function useDeleteTask(id) {\r\n        dispatch(deleteTasksTC(id))\r\n    };\r\n\r\n    function useCheckTask(id, task) {\r\n        dispatch(checkTasksTC(id, task))\r\n    }\r\n\r\n    function useNewTask(task) {\r\n        dispatch(addTasksTC(task))\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={css.allTasks} >\r\n            <div className={css.header}>\r\n                {tasks\r\n                    ? <h2 className={css.headerText}>Active Tasks: {tasks.filter(task => !task.isDone).length}\r\n                        <NavLink className={css.headerLink} to={'/taskList'}>back</NavLink> </h2>\r\n                    : <h2 className={css.headerText}>Подзадач нет<NavLink className={css.headerLink} to={'/taskList'}> back </NavLink></h2>\r\n\r\n                }\r\n\r\n            </div>\r\n            <div className={css.inputForm}>\r\n                <InputForm useNewTask={useNewTask} />\r\n            </div>\r\n            <div className={css.tasks}>\r\n                {tasks\r\n                    ? tasks.map(t => <Task task={t} deleteTask={useDeleteTask} checkTask={useCheckTask} />)\r\n                    : <p></p>}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AllTasks;","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport css from './InputForm.module.css';\r\n\r\nconst InputForm = (props) => {\r\n    const { register, handleSubmit, setValue } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        let newTask = {\r\n            taskListName: data.taskText\r\n        }\r\n        props.useNewTask(newTask);\r\n        setValue('taskText', '')\r\n    }\r\n\r\n    return (\r\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <input className={css.text} name='taskText'\r\n                ref={register} placeholder={'enter your task'} />\r\n                \r\n            <input className={css.addBtn} value=\"ADD\" type='submit'></input>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default InputForm;","// API\r\nimport { listsAPI } from '../API/API';\r\nimport * as firebase from 'firebase';\r\n\r\n// consts\r\nconst SET_LIST = 'SET-LIST';\r\nconst ADD_LIST = 'ADD-LIST';\r\nconst UPDATE_LIST_TEXT = 'UPDATE-LIST-TEXT';\r\n\r\n// initial state\r\nconst initialState = {\r\n    lists: [\r\n        {\r\n            id: 0, taskListName: \"firstTaskList\",\r\n            task: [\r\n                {\r\n                    id: 1,\r\n                    taskName: \"write 1 task\",\r\n                    isDone: \"true\",\r\n                    isNow: \"high\"\r\n                },\r\n\r\n                {\r\n                    taskName: \"Chek all tasks\",\r\n                    isNow: \"high\",\r\n                    isDone: \"true\",\r\n                    id: 2\r\n                },\r\n                {\r\n                    taskName: \"repair task adding\",\r\n                    isNow: \"medium\",\r\n                    isDone: \"true\",\r\n                    id: 3\r\n                },\r\n                {\r\n                    taskName: \"clear input\",\r\n                    isNow: \"low\",\r\n                    isDone: \"true\",\r\n                    id: 4\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 1, taskListName: \"secondTaskList\",\r\n            task: [\r\n                {\r\n                    id: 1,\r\n                    taskName: \"write 1 task\",\r\n                    isDone: \"true\",\r\n                    isNow: \"high\"\r\n                },\r\n                {\r\n                    taskName: \"Chek all tasks\",\r\n                    isNow: \"high\",\r\n                    isDone: \"true\",\r\n                    id: 2\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n\r\n    newListText: ''\r\n};\r\n\r\n\r\n// reducer\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_LIST:\r\n            return {\r\n                ...state,\r\n                lists: action.lists\r\n            }\r\n        case ADD_LIST:\r\n            // debugger\r\n            let newList = {\r\n                id: 3,\r\n                listText: action.newListText\r\n            };\r\n            return {\r\n                ...state,\r\n                lists: [...state.lists, newList]\r\n            }\r\n\r\n        case UPDATE_LIST_TEXT:\r\n\r\n            return {\r\n                ...state,\r\n                newListText: action.newListText\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listReducer;\r\n\r\n// action creators\r\nexport const setLists = (lists) => ({ type: SET_LIST, lists });\r\n\r\n// thunk creators\r\nexport const getListsTC = () => async (dispatch) => {\r\n    const db = firebase.database().ref('taskList');\r\n    db.on('value', (elem) => {\r\n        let response = elem.val();\r\n        dispatch(setLists(response))\r\n    })\r\n};\r\n\r\nexport const deleteListsTC = (id) => async (dispatch) => {\r\n    firebase.database().ref('taskList').child(id).remove();\r\n    dispatch(getListsTC());\r\n};\r\n\r\nexport const updateListsTC = (list) => async (dispatch) => {\r\n    let id = list.id;\r\n\r\n    // const db = firebase.database().ref('taskList');\r\n    // db.once('value', (elem) => {\r\n    //     var response = elem.val().length;\r\n\r\n    //     let updates = {};\r\n    //     updates[id] = list;\r\n    //     firebase.database().ref('taskList').child(id).update(updates);\r\n    // });\r\n\r\n    await listsAPI.changeLists(id, list);\r\n    dispatch(getListsTC());\r\n};\r\n\r\nexport const addListsTC = (list) => async (dispatch) => {\r\n\r\n    const db = firebase.database().ref('taskList');\r\n    db.once('value', (elem) => {\r\n        var response = elem.val().length;\r\n        console.log(response);\r\n        list.id = response;\r\n        let updates = {};\r\n        updates[response] = list;\r\n        firebase.database().ref('taskList').update(updates);\r\n    });\r\n\r\n\r\n    dispatch(getListsTC());\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport css from './List.module.css';\r\n\r\nconst List = (props) => {\r\n    // console.log(props.list[0])\r\n\r\n    return (\r\n        <div className={`${css.list}`}>\r\n            <NavLink className={`${css.link}`} to={`/taskList/${props.list.id}`} >\r\n                <div className={css.text}>{props.list.taskListName}</div>\r\n            </NavLink>\r\n            <div className={css.btns}>\r\n                <button className={css.update} onClick={() => props.updateList(props.list)} className={css.deleteBtn}>Update</button>\r\n                <button className={css.delete} onClick={() => props.deleteList(props.list.id)} className={css.deleteBtn}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default List","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport InputFormList from '../InputFormList/InputFormList';\r\nimport { deleteListsTC, getListsTC, updateListsTC, addListsTC } from './../../Redux/listReducer';\r\nimport List from './../List/List';\r\nimport css from './Lists.module.css';\r\nimport { Redirect } from 'react-router';\r\n\r\n\r\nconst Lists = () => {\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n    const lists = useSelector(state => state.listPage.lists);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getListsTC());\r\n    }, []);\r\n\r\n    function useDeleteList(id) {\r\n        dispatch(deleteListsTC(id))\r\n    };\r\n\r\n    function useUpdateList(list) {\r\n        dispatch(updateListsTC(list))\r\n    };\r\n\r\n    function useNewList(list) {\r\n        dispatch(addListsTC(list))\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n    // console.log(lists)\r\n\r\n    return (\r\n        <div className={css.allTasks}>\r\n            <div className={css.header}>\r\n                <h2 >Active Tasks</h2>\r\n            </div>\r\n\r\n            <div className={css.inputForm}>\r\n                <InputFormList useNewTask={useNewList} />\r\n            </div>\r\n\r\n            <div className={css.tasks}>\r\n                {lists.length > 1\r\n                    ? lists.map(l => <List list={l} deleteList={useDeleteList} updateList={useUpdateList} />)\r\n                    : <List list={lists[0]} deleteList={useDeleteList} updateList={useUpdateList} />\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Lists;","//API\r\nimport * as firebase from 'firebase';\r\n\r\n//consts\r\nconst SET_USER_DATA = 'SET-USER-DATA';\r\n\r\n//initial state\r\nlet initialState = {\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\n//reducer\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n\r\n//action creators\r\nexport const setUserData = (login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: { login, isAuth }\r\n});\r\n\r\n//thunk creators\r\n// export const authTC = (loginName) => async (dispatch) => {\r\n//     let response = await authAPI.me();\r\n//     let { login } = response.data.me;\r\n//     if (login == loginName) {\r\n//         dispatch(setUserData(login, true));\r\n//     } else {\r\n//         dispatch(setUserData(null, false));\r\n//     }\r\n// };\r\n\r\nexport const loginTC = (login, password) => async (dispatch) => {\r\n    firebase.auth().signInWithEmailAndPassword(login, password)\r\n        .catch(error => console.log(error));\r\n    dispatch(setUserData(login, true));\r\n\r\n};\r\n\r\nexport const logoutTC = () => async (dispatch) => {\r\n    dispatch(setUserData(null, false));\r\n}","import { yupResolver } from '@hookform/resolvers/yup';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport * as yup from 'yup';\r\nimport { loginTC } from './../../Redux/authReducer';\r\nimport css from './LoginForm.module.css';\r\n\r\nconst showErrors = yup.object().shape({\r\n    login: yup.string().required(),\r\n    password: yup.string().required(),\r\n})\r\n\r\nconst LoginForm = () => {\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n    console.log(isAuth)\r\n    \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { register, handleSubmit, setValue, errors } = useForm({\r\n        resolver: yupResolver(showErrors)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        dispatch(loginTC(data.login, data.password, data.rememberme));\r\n        setValue('login', '');\r\n        setValue('password', '')\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to = {'/taskList'} />\r\n    }\r\n\r\n    return (\r\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)} >\r\n            <p>login : mail@mail.mail</p>\r\n            <p>password : password</p>\r\n            <input name='login' ref={register} className={css.text} type='text' placeholder='Enter login' />\r\n            <p>{errors.login?.message}</p>\r\n            <input name='password' ref={register} className={css.text} type='password' placeholder='Enter password' />\r\n            <p>{errors.password?.message}</p>\r\n\r\n            <div className={css.checkbox}>\r\n                <label for='rememberme'>Remember me</label>\r\n                <input name='rememberme' ref={register} className={css.check}\r\n                    type='checkbox' id='rememberme' />\r\n            </div>\r\n\r\n            <input className={css.btn} type='submit' value='Login' />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { logoutTC } from '../../Redux/authReducer';\r\n\r\nconst Header = () => {\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n    // const isAuth = 'true'\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            {isAuth\r\n            ? <div><button onClick = {() => dispatch(logoutTC())} >LogOut</button> </div>\r\n            : <NavLink to = {'/login'}>LogIn</NavLink>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport AllTask from './AllTasks/AllTasks';\r\nimport Lists from './Lists/Lists';\r\nimport NavBar from './Nav/Nav';\r\nimport css from './ToDoList.module.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport LoginForm from './Login/LoginForm'\r\nimport Header from './Header/Header';\r\n\r\nconst ToDoList = () => {\r\n\r\n    return (\r\n        \r\n            <div className={css.todo}>\r\n                <Header />\r\n                <h1>ToDoList</h1>\r\n                {/* <NavBar /> */}\r\n                <Route path='/taskList/:taskId' render={() => <AllTask />} />\r\n                <Route exact path='/taskList' render={() => <Lists />} />\r\n\r\n                <Route path='/login' render={() => <LoginForm /> } />\r\n            </div>\r\n\r\n    )\r\n};\r\n\r\nexport default withRouter(ToDoList);\r\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport taskReducer from './taskReducer';\r\nimport listReducer from './listReducer';\r\nimport authReducer from './authReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n    taskPage: taskReducer,\r\n    listPage: listReducer,\r\n    authPage: authReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './App.css';\nimport ToDoList from './Components/ToDoList';\nimport store from './Redux/reduxStore';\n\nconst App = () => {\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <HashRouter>\n          <ToDoList />\n        </HashRouter>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBwbpTx7d1a0DUP2jHqAaKkZhl7sjW6QPA\",\n  authDomain: \"todolist-3009f.firebaseapp.com\",\n  databaseURL: \"https://todolist-3009f.firebaseio.com\",\n  projectId: \"todolist-3009f\",\n  storageBucket: \"todolist-3009f.appspot.com\",\n  messagingSenderId: \"907810208879\",\n  appId: \"1:907810208879:web:6d6bd6059a7bb44c3ce19a\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allTasks\":\"AllTasks_allTasks__3jm6-\",\"header\":\"AllTasks_header__YzbYR\",\"headerText\":\"AllTasks_headerText__3foYd\",\"headerLink\":\"AllTasks_headerLink__2oSo_\",\"inputForm\":\"AllTasks_inputForm__1y5iu\",\"tasks\":\"AllTasks_tasks__1glog\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"List_list__3-ERM\",\"link\":\"List_link__YbwRo\",\"text\":\"List_text__1TZrC\",\"btns\":\"List_btns__1cdxj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2i8xg\",\"state\":\"Task_state__3ZMHM\",\"deleteBtn\":\"Task_deleteBtn__17owL\",\"checkBtn\":\"Task_checkBtn__2ZdP8\",\"text\":\"Task_text__Xthyq\",\"high\":\"Task_high___AUQL\",\"medium\":\"Task_medium__1XVW3\",\"low\":\"Task_low__29NL3\",\"done\":\"Task_done__1oz61\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginForm_form__IPpdV\",\"text\":\"LoginForm_text__3Brut\",\"checkbox\":\"LoginForm_checkbox__1mSLW\",\"btn\":\"LoginForm_btn__IM4EY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allTasks\":\"Lists_allTasks__3M8dN\",\"lists\":\"Lists_lists__ws7ll\",\"header\":\"Lists_header__1VL64\",\"inputForm\":\"Lists_inputForm__2SpqJ\",\"tasks\":\"Lists_tasks__2lp69\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InputForm_form__K2ZVr\",\"text\":\"InputForm_text__3Icxu\",\"select\":\"InputForm_select__2tnXU\",\"addBtn\":\"InputForm_addBtn__1129H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InputForm_form__1Vu1C\",\"text\":\"InputForm_text__3PjtO\",\"select\":\"InputForm_select__2W8f7\",\"addBtn\":\"InputForm_addBtn__3AOlK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"Nav_links__1Qew5\",\"navLink\":\"Nav_navLink__O2BDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"ToDoList_todo__1yxY9\"};"],"sourceRoot":""}
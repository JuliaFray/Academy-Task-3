{"version":3,"sources":["API/API.js","Redux/taskReducer.js","Components/InputForm/InputForm.jsx","Components/Task/Task.jsx","Components/AllTasks/AllTasks.jsx","Redux/authReducer.js","Components/Header/Header.jsx","Components/InputFormList/InputFormList.jsx","Redux/listReducer.js","Components/List/List.jsx","Components/Lists/Lists.jsx","Components/Login/LoginForm.jsx","Components/ToDoList.jsx","Redux/reduxStore.js","App.js","serviceWorker.js","index.js","Components/AllTasks/AllTasks.module.css","Components/List/List.module.css","Components/Task/Task.module.css","Components/Login/LoginForm.module.css","Components/Lists/Lists.module.css","Components/InputForm/InputForm.module.css","Components/Header/Header.module.css","Components/InputFormList/InputFormList.module.css","Components/ToDoList.module.css"],"names":["axios","baseURL","credentials","initialState","tasks","taskReducer","state","action","type","task","setTasks","getTasksTC","listId","dispatch","a","firebase","ref","on","elem","val","InputForm","props","useForm","register","handleSubmit","setValue","className","css","form","onSubmit","data","newTask","taskText","isNow","isDone","useNewTask","text","name","placeholder","for","id","addBtn","value","Task","style","high","low","done","useSelector","authPage","isAuth","onClick","checkTask","changeTask","checkBtn","deleteTask","deleteBtn","to","AllTasks","taskPage","useDispatch","useDeleteTask","child","remove","deleteTasksTC","useCheckTask","updates","update","checkTasksTC","path","window","location","href","split","length","newKey","push","key","console","log","addTasksTC","useEffect","tasksArray","Object","values","allTasks","header","headerText","filter","headerLink","inputForm","map","t","login","authReducer","payload","setUserData","Header","logout","signOut","then","taskListName","lists","listReducer","getListsTC","response","List","list","link","btns","updateList","delete","deleteList","Lists","listPage","useDeleteList","deleteListsTC","useUpdateList","listsArray","InputFormList","addListsTC","l","showErrors","yup","shape","required","password","LoginForm","resolver","yupResolver","errors","rememberme","signInWithEmailAndPassword","catch","error","onAuthStateChanged","user","email","message","checkbox","check","btn","withRouter","todo","render","exact","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","App","Boolean","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5890b6a0.chunk.js","sourcesContent":["import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:3000',\r\n    credentials: 'include'\r\n});\r\n\r\nexport const tasksAPI = {\r\n    getTasks() {\r\n        return (\r\n            instance\r\n                .get(`list`)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    addTasks(task) {\r\n        return (\r\n            instance\r\n                .post(`list`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    changeTasks(taskId, task) {\r\n        return (\r\n            instance\r\n                .put(`list/${taskId}`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    deleteTasks(taskId) {\r\n        return (\r\n            instance\r\n                .delete(`list/${taskId}`)\r\n                .then(response => {\r\n                    // debugger\r\n                    return response.data\r\n                })\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const listsAPI = {\r\n    getLists() {\r\n        return (\r\n            instance\r\n                .get(`taskList`)\r\n                .then(response => {\r\n                    if (response.status == '200') {\r\n                        return response.data\r\n                    } else if (response.status == '404') {\r\n                        console.log('404 Not Found')\r\n                    }\r\n                    \r\n                })\r\n        )\r\n    },\r\n\r\n    addLists(task) {\r\n        return (\r\n            instance\r\n                .post(`taskList`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    changeLists(taskId, task) {\r\n        return (\r\n            instance\r\n                .patch(`taskList/${taskId}`, task)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    deleteLists(taskId) {\r\n        return (\r\n            instance\r\n                .delete(`taskList/${taskId}`)\r\n                .then(response => {\r\n                    // debugger\r\n                    return response.data\r\n                })\r\n        )\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return (\r\n            instance\r\n                .get(`auth`)\r\n                .then(response => {\r\n                    return response\r\n                })\r\n        )\r\n    }\r\n};\r\n\r\nexport const logAPI = {\r\n    login(login, password, rememeberme) {\r\n        return (\r\n            instance\r\n                .post(`login`, {login, password, rememeberme })\r\n                .then(response => {\r\n                    if (response.resultCode === '200') {\r\n                        return response\r\n                    }\r\n                })\r\n        )\r\n    },\r\n\r\n    logout() {\r\n        return (\r\n            instance\r\n                .delete(`logout`)\r\n                .then(response => {\r\n                    debugger\r\n                    return response\r\n                })\r\n        )\r\n    }\r\n}","// API\r\nimport { tasksAPI } from './../API/API';\r\nimport * as firebase from 'firebase';\r\n\r\n// consts\r\nconst SET_TASK = 'SET-TASK';\r\nconst ADD_TASK = 'ADD-TASK';\r\nconst UPDATE_TASK_TEXT = 'UPDATE-TASK-TEXT';\r\n\r\n// initial state\r\nconst initialState = {\r\n    tasks: [\r\n    ]\r\n};\r\n\r\n\r\n// reducer\r\nconst taskReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASK:\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks.task\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default taskReducer;\r\n\r\n// action creators\r\nexport const setTasks = (tasks) => ({ type: SET_TASK, tasks });\r\n// export const addTask = (task) => ({ type: ADD_TASK, task });\r\nexport const updateTaskText = (newTaskText) => ({ type: UPDATE_TASK_TEXT, newTaskText });\r\n\r\n\r\n// thunk creators\r\nexport const getTasksTC = (listId) => async (dispatch) => {\r\n\r\n    const db = firebase.database().ref('taskList/');\r\n    db.on('value', (elem) => {\r\n        let response = elem.val();\r\n        let tasks = response[listId]\r\n        dispatch(setTasks(tasks))\r\n    })\r\n};\r\n\r\nexport const deleteTasksTC = (id) => async (dispatch) => {\r\n    firebase.database().ref('task').child(id).remove();\r\n    dispatch(getTasksTC());\r\n};\r\n\r\nexport const checkTasksTC = (id, task) => async (dispatch) => {\r\n    var updates = {};\r\n    updates[id] = task;\r\n    firebase.database().ref('task').child(id).update(updates);\r\n    // await tasksAPI.changeTasks(id, task);\r\n    dispatch(getTasksTC());\r\n};\r\n\r\nexport const addTasksTC = (listId, task) => async (dispatch) => {\r\n    var newKey = firebase.database().ref('task').push().key;\r\n    var updates = {};\r\n    task.id = newKey;\r\n    updates[newKey] = task;\r\n    console.log(listId)\r\n    firebase.database().ref('taskList').child(listId).child('task').update(updates);\r\n    \r\n    // dispatch(getTasksTC());\r\n};","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport css from './InputForm.module.css';\r\n\r\nconst InputForm = (props) => {\r\n    const { register, handleSubmit, setValue } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        let newTask = {\r\n            taskText: data.taskText,\r\n            isNow: data.isNow,\r\n            isDone: 'false'\r\n        }\r\n        props.useNewTask(newTask);\r\n        setValue('taskText', '')\r\n    }\r\n\r\n    return (\r\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <input className={css.text} name='taskText'\r\n                ref={register} placeholder={'enter your task'} />\r\n\r\n            <label for = 'isNow'>Срочность</label>\r\n            <input name = 'isNow' ref = {register} id = 'isNow' type = 'checkbox' />\r\n\r\n            <input className={css.addBtn} type='submit' value='ADD' />\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport css from './Task.module.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n\r\nconst Task = (props) => {\r\n\r\n    let task = props.task;\r\n    // console.log(task)\r\n\r\n    if (task.isDone) {\r\n        if (task.isNow) {\r\n            var style = css.high\r\n        } else if (!task.isNow) {\r\n            var style = css.low\r\n        }\r\n    } else {\r\n        var style = css.done\r\n    }\r\n\r\n    function changeTask(task) {\r\n        task.isDone = 'true';\r\n        props.checkTask(task.id, task)\r\n    };\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n    if (!isAuth) {\r\n        return <Redirect to = {'/login'} />\r\n    }\r\n\r\n    return (\r\n        <div className={`${css.task} + ${style}`}>\r\n            <div className={css.text}>{task.taskText}</div>\r\n\r\n            {!task.isDone\r\n                    ? <button onClick = {() => props.deleteTask(task.id)} className={css.deleteBtn}>Delete</button>\r\n                    : <button onClick = {() => changeTask(props.task)} className={css.checkBtn}>Check done</button>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Task","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { addTasksTC, checkTasksTC, deleteTasksTC, getTasksTC } from '../../Redux/taskReducer';\r\nimport InputForm from '../InputForm/InputForm';\r\nimport Task from './../Task/Task';\r\nimport css from './AllTasks.module.css';\r\n\r\n\r\nconst AllTasks = () => {\r\n\r\n    const tasks = useSelector(state => state.taskPage.tasks);\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let path = window.location.href;\r\n        path = path.split('/');\r\n        let listId = path[path.length - 1];\r\n        dispatch(getTasksTC(listId));\r\n    }, []);\r\n\r\n    function useDeleteTask(id) {\r\n        dispatch(deleteTasksTC(id))\r\n    };\r\n\r\n    function useCheckTask(id, task) {\r\n        dispatch(checkTasksTC(id, task))\r\n    }\r\n\r\n    function useNewTask(task) {\r\n        let path = window.location.href;\r\n        path = path.split('/');\r\n        let listId = path[path.length - 1];\r\n        dispatch(addTasksTC(listId, task))\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n    let tasksArray = [];\r\n    if (tasks) {\r\n        tasksArray = Object.values(tasks);\r\n    } else {\r\n        tasksArray = []\r\n    };\r\n\r\n    console.log(tasksArray)\r\n\r\n\r\n    return (\r\n        <div className={css.allTasks} >\r\n            <div className={css.header}>\r\n                {tasksArray.length > 0\r\n                    ? <div>\r\n                        <h2 className={css.headerText}>Active Tasks: {tasksArray.filter(task => !task.isDone).length}\r\n                            <NavLink className={css.headerLink} to={'/taskList'}>back</NavLink> </h2>\r\n                        <div className={css.inputForm}>\r\n                            <InputForm useNewTask={useNewTask} />\r\n                        </div>\r\n                        <div className={css.tasks}>\r\n                            {tasksArray.map(t => <Task task={t} deleteTask={useDeleteTask} checkTask={useCheckTask} />)}\r\n                        </div>\r\n                    </div>\r\n                    : <div>\r\n                        <h2 className={css.headerText}>Подзадач нет<NavLink className={css.headerLink} to={'/taskList'}> back </NavLink>\r\n                        </h2>\r\n                        <div className={css.inputForm}>\r\n                            <InputForm useNewTask={useNewTask} />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AllTasks;","//API\r\nimport * as firebase from 'firebase';\r\n\r\n//consts\r\nconst SET_USER_DATA = 'SET-USER-DATA';\r\n\r\n//initial state\r\nlet initialState = {\r\n    login: '',\r\n    isAuth: false\r\n};\r\n\r\n//reducer\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n\r\n//action creators\r\nexport const setUserData = (login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: { login, isAuth }\r\n});\r\n\r\n//thunk creators\r\n\r\nexport const loginTC = (login, password) => async (dispatch) => {\r\n    firebase.auth().signInWithEmailAndPassword(login, password)\r\n        .catch(error => {\r\n            console.log(error)\r\n        });\r\n\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            console.log(user)\r\n            if (user) {\r\n                if (user.email == login) {\r\n                    dispatch(setUserData(login, true))\r\n                }\r\n            } else {\r\n                dispatch(setUserData('', false))\r\n            }\r\n        })\r\n\r\n    \r\n\r\n};\r\n\r\nexport const logoutTC = () => async (dispatch) => {\r\n    firebase.auth().signOut().then(function() {\r\n        dispatch(setUserData('', false));\r\n    })\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { logoutTC } from '../../Redux/authReducer';\r\nimport css from './Header.module.css';\r\n\r\nconst Header = () => {\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n    const login = useSelector(state => state.authPage.login);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className = {css.header}>\r\n            {isAuth\r\n            ? <div className = {css.logout}>{login}<button onClick = {() => dispatch(logoutTC())} >LogOut</button> </div>\r\n            : <div className = {css.login}><NavLink to = {'/login'}>LogIn</NavLink></div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport css from './InputFormList.module.css';\r\n\r\nconst InputForm = (props) => {\r\n    const { register, handleSubmit, setValue } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n        let newTask = {\r\n            taskListName: data.taskText\r\n        }\r\n        props.useNewTask(newTask);\r\n        setValue('taskText', '')\r\n    }\r\n\r\n    return (\r\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <input className={css.text} name='taskText'\r\n                ref={register} placeholder={'enter your task'} />\r\n                \r\n            <input className={css.addBtn} value=\"ADD\" type='submit' />\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default InputForm;","// API\r\nimport { listsAPI } from '../API/API';\r\nimport * as firebase from 'firebase';\r\nimport { isAsyncValidating } from 'redux-form';\r\n\r\n// consts\r\nconst SET_LIST = 'SET-LIST';\r\nconst ADD_LIST = 'ADD-LIST';\r\nconst UPDATE_LIST_TEXT = 'UPDATE-LIST-TEXT';\r\n\r\n// initial state\r\nconst initialState = {\r\n    lists: [{}]\r\n};\r\n\r\n\r\n// reducer\r\nconst listReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_LIST:\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                lists: action.lists\r\n            }\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listReducer;\r\n\r\n// action creators\r\nexport const setLists = (lists) => ({ type: SET_LIST, lists });\r\n\r\n// thunk creators\r\nexport const getListsTC = () => async (dispatch) => {\r\n    const db = firebase.database().ref('taskList');\r\n    db.on('value', (elem) => {\r\n        let response = elem.val();\r\n        dispatch(setLists(response))\r\n    })\r\n};\r\n\r\nexport const deleteListsTC = (id) => async (dispatch) => {\r\n    console.log(id)\r\n    firebase.database().ref('taskList').child(id).remove();\r\n    dispatch(getListsTC());\r\n};\r\n\r\nexport const updateListsTC = (list) => async (dispatch) => {\r\n    let id = list.id;\r\n    var updates = {};\r\n    updates[id] = list\r\n    const db = firebase.database().ref('taskList').child(id).update(updates);\r\n    dispatch(getListsTC());\r\n};\r\n\r\nexport const addListsTC = (list) => async (dispatch) => {\r\n    const db = firebase.database().ref('taskList');\r\n    var newKey = firebase.database().ref('taskList').push().key;\r\n    var updates = {};\r\n    list.id = newKey;\r\n    updates[newKey] = list;\r\n    firebase.database().ref('taskList').update(updates);\r\n    \r\n    dispatch(getListsTC());\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport css from './List.module.css';\r\n\r\nconst List = (props) => {\r\n    // console.log(props)\r\n\r\n    return (\r\n        <div className={`${css.list}`}>\r\n            <NavLink className={`${css.link}`} to={`/taskList/${props.list.id}`} >\r\n                <div className={css.text}>{props.list.taskListName}</div>\r\n            </NavLink>\r\n            <div className={css.btns}>\r\n                <button className={css.update} onClick={() => props.updateList(props.list)} className={css.deleteBtn}>Update</button>\r\n                <button className={css.delete} onClick={() => props.deleteList(props.list.id)} className={css.deleteBtn}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default List","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport InputFormList from '../InputFormList/InputFormList';\r\nimport { addListsTC, deleteListsTC, getListsTC, updateListsTC } from './../../Redux/listReducer';\r\nimport css from './Lists.module.css';\r\nimport List from './../List/List'\r\n\r\n\r\nconst Lists = () => {\r\n\r\n    const lists = useSelector(state => state.listPage.lists);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getListsTC());\r\n    }, [lists.length]);\r\n\r\n    function useNewList(list) {\r\n        dispatch(addListsTC(list))\r\n    };\r\n\r\n    function useDeleteList(id) {\r\n        dispatch(deleteListsTC(id))\r\n    }\r\n\r\n    function useUpdateList() { }\r\n\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    let listsArray = [];\r\n    listsArray = Object.values(lists);\r\n\r\n    return (\r\n        <div className={css.allTasks}>\r\n            <div className={css.header}>\r\n                <h2 >All Tasks</h2>\r\n            </div>\r\n\r\n            <div className={css.inputForm}>\r\n                <InputFormList useNewTask={useNewList} />\r\n            </div>\r\n\r\n            <div className={css.tasks}>\r\n                {listsArray.length > 1\r\n                    ? listsArray.map(l => <List list={l} deleteList={useDeleteList} updateList={useUpdateList} />)\r\n                    : <List list={listsArray[0]} deleteList={useDeleteList} updateList={useUpdateList} />\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lists;","import { yupResolver } from '@hookform/resolvers/yup';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport * as yup from 'yup';\r\nimport { loginTC } from './../../Redux/authReducer';\r\nimport css from './LoginForm.module.css';\r\n\r\nconst showErrors = yup.object().shape({\r\n    login: yup.string().required(),\r\n    password: yup.string().required(),\r\n})\r\n\r\nconst LoginForm = () => {\r\n\r\n    const isAuth = useSelector(state => state.authPage.isAuth);\r\n    // console.log(isAuth)\r\n    \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { register, handleSubmit, setValue, errors } = useForm({\r\n        resolver: yupResolver(showErrors)\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        dispatch(loginTC(data.login, data.password, data.rememberme));\r\n        setValue('login', '');\r\n        setValue('password', '')\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to = {'/taskList'} />\r\n    }\r\n\r\n    return (\r\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)} >\r\n            <p>login : mail@mail.mail</p>\r\n            <p>password : password</p>\r\n            <input name='login' ref={register} className={css.text} type='text' placeholder='Enter login' />\r\n            <p>{errors.login?.message}</p>\r\n            <input name='password' ref={register} className={css.text} type='password' placeholder='Enter password' />\r\n            <p>{errors.password?.message}</p>\r\n\r\n            <div className={css.checkbox}>\r\n                <label for='rememberme'>Remember me</label>\r\n                <input name='rememberme' ref={register} className={css.check}\r\n                    type='checkbox' id='rememberme' />\r\n            </div>\r\n\r\n            <input className={css.btn} type='submit' value='Login' />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { Route, withRouter } from 'react-router-dom';\r\nimport AllTask from './AllTasks/AllTasks';\r\nimport Header from './Header/Header';\r\nimport Lists from './Lists/Lists';\r\nimport LoginForm from './Login/LoginForm';\r\nimport css from './ToDoList.module.css';\r\n\r\nconst ToDoList = () => {\r\n\r\n    return (\r\n        \r\n            <div className={css.todo}>\r\n                <Header />\r\n                <h1>ToDoList</h1>\r\n                <Route path='/taskList/:taskId' render={() => <AllTask />} />\r\n                <Route exact path='/taskList' render={() => <Lists />} />\r\n\r\n                <Route path='/login' render={() => <LoginForm /> } />\r\n            </div>\r\n\r\n    )\r\n};\r\n\r\nexport default withRouter(ToDoList);\r\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport taskReducer from './taskReducer';\r\nimport listReducer from './listReducer';\r\nimport authReducer from './authReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n    taskPage: taskReducer,\r\n    listPage: listReducer,\r\n    authPage: authReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport './App.css';\nimport ToDoList from './Components/ToDoList';\nimport store from './Redux/reduxStore';\n\nconst App = () => {\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <HashRouter>\n          <ToDoList />\n        </HashRouter>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBwbpTx7d1a0DUP2jHqAaKkZhl7sjW6QPA\",\n  authDomain: \"todolist-3009f.firebaseapp.com\",\n  databaseURL: \"https://todolist-3009f.firebaseio.com\",\n  projectId: \"todolist-3009f\",\n  storageBucket: \"todolist-3009f.appspot.com\",\n  messagingSenderId: \"907810208879\",\n  appId: \"1:907810208879:web:6d6bd6059a7bb44c3ce19a\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allTasks\":\"AllTasks_allTasks__3jm6-\",\"header\":\"AllTasks_header__YzbYR\",\"headerText\":\"AllTasks_headerText__3foYd\",\"headerLink\":\"AllTasks_headerLink__2oSo_\",\"inputForm\":\"AllTasks_inputForm__1y5iu\",\"tasks\":\"AllTasks_tasks__1glog\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"List_list__3-ERM\",\"link\":\"List_link__YbwRo\",\"text\":\"List_text__1TZrC\",\"btns\":\"List_btns__1cdxj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2i8xg\",\"state\":\"Task_state__3ZMHM\",\"deleteBtn\":\"Task_deleteBtn__17owL\",\"checkBtn\":\"Task_checkBtn__2ZdP8\",\"text\":\"Task_text__Xthyq\",\"high\":\"Task_high___AUQL\",\"medium\":\"Task_medium__1XVW3\",\"low\":\"Task_low__29NL3\",\"done\":\"Task_done__1oz61\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginForm_form__IPpdV\",\"text\":\"LoginForm_text__3Brut\",\"checkbox\":\"LoginForm_checkbox__1mSLW\",\"btn\":\"LoginForm_btn__IM4EY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allTasks\":\"Lists_allTasks__3M8dN\",\"lists\":\"Lists_lists__ws7ll\",\"header\":\"Lists_header__1VL64\",\"inputForm\":\"Lists_inputForm__2SpqJ\",\"tasks\":\"Lists_tasks__2lp69\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InputForm_form__K2ZVr\",\"text\":\"InputForm_text__3Icxu\",\"select\":\"InputForm_select__2tnXU\",\"addBtn\":\"InputForm_addBtn__1129H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3uznX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InputFormList_form__1PVH_\",\"text\":\"InputFormList_text__1KX87\",\"addBtn\":\"InputFormList_addBtn__3w8m6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"ToDoList_todo__1yxY9\"};"],"sourceRoot":""}